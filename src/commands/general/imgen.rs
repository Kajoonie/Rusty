use rusty::{send_message, reply};
use serde_json::{json, Value};
use serenity::{
    client::Context,
    framework::standard::{macros::command, Args, CommandResult},
    model::channel::Message,
};

use crate::commands::general::openai::OpenAiRequest;

const ENDPOINT: &str = "https://api.openai.com/v1/images/generations";

#[command]
#[description = "Generate an image with OpenAI's DALL-E"]
async fn imgen(ctx: &Context, msg: &Message, args: Args) -> CommandResult {
    let args = args
        .remains()
        .unwrap_or("Me and my robot friend holding hands");

    let body = json!({
        "prompt": format!("{args}"),
        "n": 1,
        "size": "1024x1024"
    });

    let request = OpenAiRequest::new(valid_json_path, error_json_path);
    let response = request.send_request(ENDPOINT, body).await;

    match response {
        Ok(url) => {
            send_message(ctx, msg, |m| m.embed(|e| {
                e.title(args)
                    .image(url)
                    .footer(|f| f.text("Generated by OpenAI's DALL-E mode."))
            })).await
        },
        Err(err) => reply(ctx, msg, err).await,
    }
}

fn valid_json_path(json: &Value) -> &Value {
    &json["data"][0]["url"]
}

fn error_json_path(json: &Value) -> &Value {
    &json["error"]["message"]
}