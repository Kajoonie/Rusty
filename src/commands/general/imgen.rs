use reqwest::{header, header::HeaderMap};
use serde_json::{json, Error, Value};
use serenity::{
    client::Context,
    framework::standard::{macros::command, Args, CommandResult},
    model::channel::Message,
};

use crate::openai_api_key;

#[command]
#[description = "Generate an image with OpenAI's DALL-E"]
async fn imgen(ctx: &Context, msg: &Message, args: Args) -> CommandResult {
    let question = args
        .remains()
        .unwrap_or("Me and my robot friend holding hands");

    let img = send_request(question).await;

    if let Some(img) = img {
        match img {
            ImageResult::Url(url) => {
                let result = msg
                    .channel_id
                    .send_message(&ctx.http, |m| {
                        m.embed(|e| {
                            e.title(question)
                                .image(url)
                                .footer(|f| f.text("Generated by OpenAI's DALL-E model"))
                        })
                    })
                    .await;

                if let Err(why) = result {
                    println!("Unable to send message: {why:?}");
                }
            }
            ImageResult::Base64(b64) => {
                let decoded = base64::decode(b64);
                if let Ok(decoded_b64) = decoded {
                    let files = vec![(&decoded_b64[..], "image.png")];
                    let result = msg.channel_id.send_files(&ctx.http, files, |m| m).await;

                    if let Err(why) = result {
                        println!("Unable to send message: {why:?}");
                    }
                }
            }
            ImageResult::Error(error) => {
                let result = msg.reply(&ctx.http, error).await;

                if let Err(why) = result {
                    println!("Unable to send message: {why:?}");
                }
            }
        }
    }

    Ok(())
}

fn build_api_auth_header() -> HeaderMap {
    let api_auth = ["Bearer ", openai_api_key().as_str()].concat();

    let mut headers = HeaderMap::new();
    headers.insert(header::AUTHORIZATION, api_auth.parse().unwrap());

    headers
}

fn build_request_body(prompt: &str) -> Value {
    json!({
        "prompt": format!("{prompt}"),
        "n": 1,
        "size": "1024x1024",
        "response_format": "b64_json",
    })
}

enum ImageResult {
    Url(String),
    Base64(String),
    Error(String),
}

async fn send_request(question: &str) -> Option<ImageResult> {
    let body = build_request_body(question);

    let client = reqwest::Client::new();
    let request_builder = client
        .post("https://api.openai.com/v1/images/generations")
        .headers(build_api_auth_header())
        .json(&body);

    if let Ok(response) = request_builder.send().await {
        if let Ok(text) = response.text().await {
            let json_result: Result<Value, Error> = serde_json::from_str(&text);
            if let Ok(json) = json_result {
                let data = &json["data"][0];
                if let Some(Value::String(b64)) = data.get("b64_json") {
                    return Some(ImageResult::Base64(b64.to_owned()));
                } else if let Some(Value::String(url)) = data.get("url") {
                    return Some(ImageResult::Url(url.to_owned()));
                } else if let Value::String(error_message) = &json["error"]["message"] {
                    return Some(ImageResult::Error(error_message.to_owned()));
                }
            }
        }
    }

    None
}
